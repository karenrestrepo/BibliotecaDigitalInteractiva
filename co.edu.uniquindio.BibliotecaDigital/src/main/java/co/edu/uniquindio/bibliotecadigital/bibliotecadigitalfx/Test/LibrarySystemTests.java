package co.edu.uniquindio.bibliotecadigital.bibliotecadigitalfx.Test;

import co.edu.uniquindio.bibliotecadigital.bibliotecadigitalfx.Enum.BookStatus;
import co.edu.uniquindio.bibliotecadigital.bibliotecadigitalfx.Model.*;
import co.edu.uniquindio.bibliotecadigital.bibliotecadigitalfx.Service.AffinitySystem;
import co.edu.uniquindio.bibliotecadigital.bibliotecadigitalfx.Service.BookRecommendationSystem;
import co.edu.uniquindio.bibliotecadigital.bibliotecadigitalfx.Structures.*;

import java.util.HashSet;

/**
 * Suite completa de pruebas unitarias para el proyecto Biblioteca Digital
 *
 * Incluye pruebas para:
 * 1. Estructuras de datos personalizadas
 * 2. Funcionalidades del modelo de dominio
 * 3. Algoritmos de recomendaci√≥n
 * 4. Sistema de afinidad
 * 5. Gesti√≥n de pr√©stamos
 * 6. Sistema de valoraciones
 * 7. Algoritmos de grafos
 *
 * Patr√≥n de dise√±o: Test Suite Pattern
 * Cada m√©todo test... representa una prueba unitaria independiente
 * que valida un aspecto espec√≠fico del sistema.
 */
public class LibrarySystemTests {

    /**
     * PRUEBA UNITARIA 1: Verificar funcionamiento b√°sico de LinkedList personalizada
     *
     * Objetivo: Validar que nuestra implementaci√≥n de lista enlazada funciona correctamente
     * Conceptos testados: Inserci√≥n, eliminaci√≥n, b√∫squeda, tama√±o
     */
    public static boolean testLinkedListFunctionality() {
        System.out.println("üß™ PRUEBA 1: Funcionalidad de LinkedList personalizada");

        try {
            LinkedList<String> lista = new LinkedList<>();

            // Prueba 1.1: Lista inicialmente vac√≠a
            if (!lista.isEmpty()) {
                System.out.println("‚ùå Error: Lista deber√≠a estar vac√≠a inicialmente");
                return false;
            }

            // Prueba 1.2: Inserci√≥n de elementos
            lista.add("Elemento1");
            lista.add("Elemento2");
            lista.add("Elemento3");

            if (lista.getSize() != 3) {
                System.out.println("‚ùå Error: Tama√±o esperado 3, obtenido " + lista.getSize());
                return false;
            }

            // Prueba 1.3: Acceso por √≠ndice
            if (!lista.getAmountNodo(0).equals("Elemento1")) {
                System.out.println("‚ùå Error: Elemento en √≠ndice 0 incorrecto");
                return false;
            }

            // Prueba 1.4: B√∫squeda de elementos
            if (!lista.contains("Elemento2")) {
                System.out.println("‚ùå Error: No encuentra elemento que deber√≠a existir");
                return false;
            }

            // Prueba 1.5: Eliminaci√≥n
            lista.delete("Elemento2");
            if (lista.getSize() != 2 || lista.contains("Elemento2")) {
                System.out.println("‚ùå Error: Eliminaci√≥n no funcion√≥ correctamente");
                return false;
            }

            System.out.println("‚úÖ PRUEBA 1 EXITOSA: LinkedList funciona correctamente");
            return true;

        } catch (Exception e) {
            System.out.println("‚ùå PRUEBA 1 FALLIDA: Excepci√≥n - " + e.getMessage());
            return false;
        }
    }

    /**
     * PRUEBA UNITARIA 2: Verificar funcionamiento de HashMap personalizado
     *
     * Objetivo: Validar que nuestra implementaci√≥n de hash map maneja correctamente
     * las operaciones de clave-valor, incluyendo colisiones
     */
    public static boolean testHashMapFunctionality() {
        System.out.println("üß™ PRUEBA 2: Funcionalidad de HashMap personalizado");

        try {
            HashMap<String, Integer> mapa = new HashMap<>();

            // Prueba 2.1: Inserci√≥n y recuperaci√≥n b√°sica
            mapa.put("clave1", 100);
            mapa.put("clave2", 200);
            mapa.put("clave3", 300);

            if (!mapa.get("clave1").equals(100)) {
                System.out.println("‚ùå Error: Valor recuperado incorrecto para clave1");
                return false;
            }

            // Prueba 2.2: Verificar existencia de claves
            if (!mapa.containsKey("clave2")) {
                System.out.println("‚ùå Error: No encuentra clave que deber√≠a existir");
                return false;
            }

            if (mapa.containsKey("claveInexistente")) {
                System.out.println("‚ùå Error: Encuentra clave que no deber√≠a existir");
                return false;
            }

            // Prueba 2.3: Actualizaci√≥n de valores
            mapa.put("clave1", 150);
            if (!mapa.get("clave1").equals(150)) {
                System.out.println("‚ùå Error: Actualizaci√≥n de valor no funcion√≥");
                return false;
            }

            // Prueba 2.4: Eliminaci√≥n
            mapa.remove("clave2");
            if (mapa.containsKey("clave2")) {
                System.out.println("‚ùå Error: Eliminaci√≥n no funcion√≥ correctamente");
                return false;
            }

            // Prueba 2.5: Manejo de colisiones (insertar muchos elementos)
            for (int i = 0; i < 50; i++) {
                mapa.put("test" + i, i);
            }

            if (!mapa.get("test25").equals(25)) {
                System.out.println("‚ùå Error: HashMap no maneja correctamente m√∫ltiples elementos");
                return false;
            }

            System.out.println("‚úÖ PRUEBA 2 EXITOSA: HashMap funciona correctamente");
            return true;

        } catch (Exception e) {
            System.out.println("‚ùå PRUEBA 2 FALLIDA: Excepci√≥n - " + e.getMessage());
            return false;
        }
    }

    /**
     * PRUEBA UNITARIA 3: Verificar funcionalidades del modelo Reader
     *
     * Objetivo: Validar que las operaciones de pr√©stamo, devoluci√≥n y valoraci√≥n
     * funcionan correctamente seg√∫n las reglas de negocio
     */
    public static boolean testReaderFunctionality() {
        System.out.println("üß™ PRUEBA 3: Funcionalidades del modelo Reader");

        try {
            // Configuraci√≥n inicial
            Library library = new Library();
            Reader reader = new Reader("Juan P√©rez", "juan@email.com", "password123", library);

            Book book1 = new Book("1", "El Quijote", "Cervantes", 1605, "Cl√°sico");
            Book book2 = new Book("2", "Cien A√±os", "Garc√≠a M√°rquez", 1967, "Realismo M√°gico");

            // Prueba 3.1: Pr√©stamo exitoso
            boolean loanSuccess = reader.requestLoan(book1);
            if (!loanSuccess) {
                System.out.println("‚ùå Error: Pr√©stamo deber√≠a ser exitoso");
                return false;
            }

            if (book1.getStatus() != BookStatus.CHECKED_OUT) {
                System.out.println("‚ùå Error: Estado del libro no cambi√≥ a prestado");
                return false;
            }

            if (reader.getLoanHistoryList().getSize() != 1) {
                System.out.println("‚ùå Error: Historial de pr√©stamos no se actualiz√≥");
                return false;
            }

            // Prueba 3.2: No se puede prestar libro ya prestado
            boolean secondLoan = reader.requestLoan(book1);
            if (secondLoan) {
                System.out.println("‚ùå Error: No deber√≠a poder prestar libro ya prestado");
                return false;
            }

            // Prueba 3.3: Valoraci√≥n de libro le√≠do
            boolean ratingSuccess = reader.rateBook(book1, 5, "Excelente libro");
            if (!ratingSuccess) {
                System.out.println("‚ùå Error: Valoraci√≥n deber√≠a ser exitosa");
                return false;
            }

            if (reader.getRatingsList().getSize() != 1) {
                System.out.println("‚ùå Error: Lista de valoraciones no se actualiz√≥");
                return false;
            }

            // Prueba 3.4: No se puede valorar libro no le√≠do
            try {
                reader.rateBook(book2, 4, "No deber√≠a funcionar");
                System.out.println("‚ùå Error: No deber√≠a poder valorar libro no le√≠do");
                return false;
            } catch (RuntimeException e) {
                // Comportamiento esperado
            }

            // Prueba 3.5: Devoluci√≥n exitosa
            boolean returnSuccess = reader.returnBook(book1);
            if (!returnSuccess) {
                System.out.println("‚ùå Error: Devoluci√≥n deber√≠a ser exitosa");
                return false;
            }

            if (book1.getStatus() != BookStatus.AVAILABLE) {
                System.out.println("‚ùå Error: Estado del libro no cambi√≥ a disponible");
                return false;
            }

            System.out.println("‚úÖ PRUEBA 3 EXITOSA: Funcionalidades de Reader correctas");
            return true;

        } catch (Exception e) {
            System.out.println("‚ùå PRUEBA 3 FALLIDA: Excepci√≥n - " + e.getMessage());
            return false;
        }
    }

    /**
     * PRUEBA UNITARIA 4: Verificar algoritmos del grafo de afinidad
     *
     * Objetivo: Validar que el grafo se construye correctamente y que los algoritmos
     * de b√∫squeda de caminos y componentes conectados funcionan
     */
    public static boolean testAffinityGraphAlgorithms() {
        System.out.println("üß™ PRUEBA 4: Algoritmos del grafo de afinidad");

        try {
            Graph<String> grafo = new Graph<>();

            // Prueba 4.1: Construcci√≥n b√°sica del grafo
            grafo.addVertex("A");
            grafo.addVertex("B");
            grafo.addVertex("C");
            grafo.addVertex("D");

            grafo.addEdge("A", "B");
            grafo.addEdge("B", "C");
            grafo.addEdge("D", "D"); // Autoconexi√≥n (caso especial)

            // Prueba 4.2: Verificar adyacencias
            HashSet<String> adyacentesA = grafo.getAdjacentVertices("A");
            if (!adyacentesA.contains("B")) {
                System.out.println("‚ùå Error: A deber√≠a estar conectado con B");
                return false;
            }

            // Prueba 4.3: Camino m√°s corto
            LinkedList<String> caminoAC = grafo.getShortestPath("A", "C");
            if (caminoAC.getSize() != 3) { // A -> B -> C
                System.out.println("‚ùå Error: Camino A-C deber√≠a tener 3 nodos, tiene " + caminoAC.getSize());
                return false;
            }

            // Verificar secuencia del camino
            if (!caminoAC.getAmountNodo(0).equals("A") ||
                    !caminoAC.getAmountNodo(1).equals("B") ||
                    !caminoAC.getAmountNodo(2).equals("C")) {
                System.out.println("‚ùå Error: Secuencia del camino A-C incorrecta");
                return false;
            }

            // Prueba 4.4: No hay camino entre nodos desconectados
            LinkedList<String> caminoAD = grafo.getShortestPath("A", "D");
            if (caminoAD.getSize() != 0) {
                System.out.println("‚ùå Error: No deber√≠a haber camino entre A y D");
                return false;
            }

            // Prueba 4.5: Componentes conectados
            LinkedList<HashSet<String>> componentes = grafo.getConnectedComponents();
            if (componentes.getSize() != 2) { // {A,B,C} y {D}
                System.out.println("‚ùå Error: Deber√≠a haber 2 componentes conectados, hay " + componentes.getSize());
                return false;
            }

            System.out.println("‚úÖ PRUEBA 4 EXITOSA: Algoritmos de grafo funcionan correctamente");
            return true;

        } catch (Exception e) {
            System.out.println("‚ùå PRUEBA 4 FALLIDA: Excepci√≥n - " + e.getMessage());
            return false;
        }
    }

    /**
     * PRUEBA UNITARIA 5: Verificar sistema de recomendaciones
     *
     * Objetivo: Validar que el algoritmo de recomendaci√≥n de libros produce
     * resultados l√≥gicos basados en preferencias del usuario
     */
    public static boolean testBookRecommendationSystem() {
        System.out.println("üß™ PRUEBA 5: Sistema de recomendaciones de libros");

        try {
            // Configuraci√≥n de datos de prueba
            Library library = new Library();
            Reader reader = new Reader("Ana Garc√≠a", "ana@email.com", "pass123", library);

            // Crear libros de prueba
            Book book1 = new Book("1", "Harry Potter 1", "J.K. Rowling", 1997, "Fantas√≠a");
            Book book2 = new Book("2", "Harry Potter 2", "J.K. Rowling", 1998, "Fantas√≠a");
            Book book3 = new Book("3", "LOTR", "J.R.R. Tolkien", 1954, "Fantas√≠a");
            Book book4 = new Book("4", "1984", "George Orwell", 1949, "Distop√≠a");

            library.getBookssList().add(book1);
            library.getBookssList().add(book2);
            library.getBookssList().add(book3);
            library.getBookssList().add(book4);

            // Simular historial del usuario
            reader.requestLoan(book1);
            reader.rateBook(book1, 5, "Excelente");

            // Prueba 5.1: Verificar que el sistema genera recomendaciones
            BookRecommendationSystem recomendador = new BookRecommendationSystem(library);
            LinkedList<BookRecommendationSystem.BookRecommendation> recomendaciones =
                    recomendador.getHybridRecommendations(reader, 5);

            if (recomendaciones.getSize() == 0) {
                System.out.println("‚ùå Error: Sistema deber√≠a generar recomendaciones");
                return false;
            }

            // Prueba 5.2: Verificar que recomienda libros del mismo autor/g√©nero
            boolean recomiendaRowling = false;
            boolean recomiendaFantasia = false;

            for (BookRecommendationSystem.BookRecommendation rec : recomendaciones) {
                Book libro = rec.getBook();
                if (libro.getAuthor().equals("J.K. Rowling")) {
                    recomiendaRowling = true;
                }
                if (libro.getCategory().equals("Fantas√≠a")) {
                    recomiendaFantasia = true;
                }
            }

            if (!recomiendaRowling && !recomiendaFantasia) {
                System.out.println("‚ùå Error: Deber√≠a recomendar libros del mismo autor o g√©nero");
                return false;
            }

            // Prueba 5.3: Verificar que no recomienda libros ya le√≠dos
            for (BookRecommendationSystem.BookRecommendation rec : recomendaciones) {
                if (rec.getBook().getIdBook().equals("1")) {
                    System.out.println("‚ùå Error: No deber√≠a recomendar libros ya le√≠dos");
                    return false;
                }
            }

            // Prueba 5.4: Verificar que las puntuaciones est√°n en rango v√°lido
            for (BookRecommendationSystem.BookRecommendation rec : recomendaciones) {
                double score = rec.getScore();
                if (score < 0.0 || score > 1.0) {
                    System.out.println("‚ùå Error: Puntuaci√≥n fuera del rango v√°lido: " + score);
                    return false;
                }
            }

            System.out.println("‚úÖ PRUEBA 5 EXITOSA: Sistema de recomendaciones funciona correctamente");
            return true;

        } catch (Exception e) {
            System.out.println("‚ùå PRUEBA 5 FALLIDA: Excepci√≥n - " + e.getMessage());
            return false;
        }
    }

    /**
     * PRUEBA UNITARIA 6: Verificar gesti√≥n de la biblioteca
     *
     * Objetivo: Validar operaciones CRUD de la biblioteca y persistencia de datos
     */
    public static boolean testLibraryManagement() {
        System.out.println("üß™ PRUEBA 6: Gesti√≥n de la biblioteca");

        try {
            Library library = Library.getInstance();

            // Prueba 6.1: Creaci√≥n de libro
            Book nuevoLibro = library.createBook("TEST001", "Libro de Prueba", "Autor Test", 2023, "Pruebas", BookStatus.AVAILABLE);

            if (nuevoLibro == null) {
                System.out.println("‚ùå Error: No se pudo crear el libro");
                return false;
            }

            // Prueba 6.2: Verificar que el libro se almacen√≥
            Book libroRecuperado = library.getBookById("TEST001");
            if (libroRecuperado == null || !libroRecuperado.getTitle().equals("Libro de Prueba")) {
                System.out.println("‚ùå Error: Libro no se almacen√≥ correctamente");
                return false;
            }

            // Prueba 6.3: No se puede crear libro con ID duplicado
            try {
                library.createBook("TEST001", "Otro Libro", "Otro Autor", 2023, "Otra Categor√≠a", BookStatus.AVAILABLE);
                System.out.println("‚ùå Error: No deber√≠a permitir IDs duplicados");
                return false;
            } catch (IllegalArgumentException e) {
                // Comportamiento esperado
            }

            // Prueba 6.4: Registro de lector
            boolean registroExitoso = library.registerReader("Usuario Test", "test@email.com", "password");
            if (!registroExitoso) {
                System.out.println("‚ùå Error: No se pudo registrar el lector");
                return false;
            }

            // Prueba 6.5: Verificar que el lector se registr√≥
            Reader lectorRecuperado = library.getReaderByUsername("test@email.com");
            if (lectorRecuperado == null || !lectorRecuperado.getName().equals("Usuario Test")) {
                System.out.println("‚ùå Error: Lector no se registr√≥ correctamente");
                return false;
            }

            // Prueba 6.6: No se puede registrar lector con username duplicado
            boolean registroDuplicado = library.registerReader("Otro Usuario", "test@email.com", "password2");
            if (registroDuplicado) {
                System.out.println("‚ùå Error: No deber√≠a permitir usernames duplicados");
                return false;
            }

            // Prueba 6.7: Eliminaci√≥n de libro
            boolean eliminacionExitosa = library.removeBook("TEST001");
            if (!eliminacionExitosa) {
                System.out.println("‚ùå Error: No se pudo eliminar el libro");
                return false;
            }

            // Verificar que el libro se elimin√≥
            if (library.getBookById("TEST001") != null) {
                System.out.println("‚ùå Error: Libro no se elimin√≥ correctamente");
                return false;
            }

            System.out.println("‚úÖ PRUEBA 6 EXITOSA: Gesti√≥n de biblioteca funciona correctamente");
            return true;

        } catch (Exception e) {
            System.out.println("‚ùå PRUEBA 6 FALLIDA: Excepci√≥n - " + e.getMessage());
            return false;
        }
    }

    /**
     * PRUEBA UNITARIA 7: Verificar cola de prioridad personalizada
     *
     * Objetivo: Validar que la cola de prioridad mantiene el orden correcto
     * seg√∫n las prioridades asignadas
     */
    public static boolean testPriorityQueueFunctionality() {
        System.out.println("üß™ PRUEBA 7: Funcionalidad de Cola de Prioridad");

        try {
            PriorityQueue<String> colaPrioridad = new PriorityQueue<>();

            // Prueba 7.1: Cola inicialmente vac√≠a
            if (!colaPrioridad.isEmpty()) {
                System.out.println("‚ùå Error: Cola deber√≠a estar vac√≠a inicialmente");
                return false;
            }

            // Prueba 7.2: Inserci√≥n con diferentes prioridades
            colaPrioridad.enqueue("Baja prioridad", 3);
            colaPrioridad.enqueue("Alta prioridad", 1);  // Menor n√∫mero = mayor prioridad
            colaPrioridad.enqueue("Media prioridad", 2);
            colaPrioridad.enqueue("M√°xima prioridad", 0);

            if (colaPrioridad.size() != 4) {
                System.out.println("‚ùå Error: Tama√±o de cola incorrecto");
                return false;
            }

            // Prueba 7.3: Verificar orden de prioridad
            String primero = colaPrioridad.dequeue();
            if (!primero.equals("M√°xima prioridad")) {
                System.out.println("‚ùå Error: Primer elemento deber√≠a ser 'M√°xima prioridad', es: " + primero);
                return false;
            }

            String segundo = colaPrioridad.dequeue();
            if (!segundo.equals("Alta prioridad")) {
                System.out.println("‚ùå Error: Segundo elemento deber√≠a ser 'Alta prioridad', es: " + segundo);
                return false;
            }

            // Prueba 7.4: Verificar peek sin remover
            String tercero = colaPrioridad.peek();
            if (!tercero.equals("Media prioridad")) {
                System.out.println("‚ùå Error: Peek deber√≠a devolver 'Media prioridad', devuelve: " + tercero);
                return false;
            }

            // Verificar que peek no removi√≥ el elemento
            if (colaPrioridad.size() != 2) {
                System.out.println("‚ùå Error: Peek no deber√≠a cambiar el tama√±o de la cola");
                return false;
            }

            // Prueba 7.5: Vaciar cola completamente
            colaPrioridad.dequeue(); // Media prioridad
            colaPrioridad.dequeue(); // Baja prioridad

            if (!colaPrioridad.isEmpty()) {
                System.out.println("‚ùå Error: Cola deber√≠a estar vac√≠a despu√©s de remover todos los elementos");
                return false;
            }

            // Prueba 7.6: Operaciones en cola vac√≠a
            String elementoVacio = colaPrioridad.dequeue();
            if (elementoVacio != null) {
                System.out.println("‚ùå Error: dequeue en cola vac√≠a deber√≠a devolver null");
                return false;
            }

            System.out.println("‚úÖ PRUEBA 7 EXITOSA: Cola de prioridad funciona correctamente");
            return true;

        } catch (Exception e) {
            System.out.println("‚ùå PRUEBA 7 FALLIDA: Excepci√≥n - " + e.getMessage());
            return false;
        }
    }

    /**
     * PRUEBA UNITARIA 8: Verificar sistema de afinidad completo
     *
     * Objetivo: Validar que el sistema detecta correctamente afinidades entre lectores
     * bas√°ndose en valoraciones similares
     */
    public static boolean testAffinitySystemIntegration() {
        System.out.println("üß™ PRUEBA 8: Sistema de afinidad integrado");

        try {
            // Configuraci√≥n de escenario de prueba
            Library library = new Library();

            Reader lector1 = new Reader("Alice", "alice@email.com", "pass1", library);
            Reader lector2 = new Reader("Bob", "bob@email.com", "pass2", library);
            Reader lector3 = new Reader("Charlie", "charlie@email.com", "pass3", library);

            Book libro1 = new Book("1", "Libro A", "Autor A", 2020, "Ficci√≥n");
            Book libro2 = new Book("2", "Libro B", "Autor B", 2021, "Ficci√≥n");
            Book libro3 = new Book("3", "Libro C", "Autor C", 2022, "Ficci√≥n");
            Book libro4 = new Book("4", "Libro D", "Autor D", 2023, "Ciencia");

            // Simular valoraciones similares entre Alice y Bob
            lector1.requestLoan(libro1);
            lector1.rateBook(libro1, 5, "Excelente");
            lector1.requestLoan(libro2);
            lector1.rateBook(libro2, 4, "Muy bueno");
            lector1.requestLoan(libro3);
            lector1.rateBook(libro3, 5, "Fant√°stico");

            lector2.requestLoan(libro1);
            lector2.rateBook(libro1, 5, "Me encant√≥");
            lector2.requestLoan(libro2);
            lector2.rateBook(libro2, 4, "Recomendado");
            lector2.requestLoan(libro3);
            lector2.rateBook(libro3, 4, "Muy bueno");

            // Charlie tiene gustos diferentes
            lector3.requestLoan(libro4);
            lector3.rateBook(libro4, 5, "Cient√≠ficamente riguroso");

            library.getReadersList().add(lector1);
            library.getReadersList().add(lector2);
            library.getReadersList().add(lector3);

            // Prueba 8.1: Crear sistema de afinidad
            AffinitySystem sistemaAfinidad = new AffinitySystem(library);
            Graph<Reader> grafoAfinidad = sistemaAfinidad.getAffinityGraph();

            if (grafoAfinidad == null) {
                System.out.println("‚ùå Error: No se pudo crear el grafo de afinidad");
                return false;
            }

            // Prueba 8.2: Alice y Bob deber√≠an estar conectados (3 libros en com√∫n con valoraciones similares)
            HashSet<Reader> amigosAlice = grafoAfinidad.getAdjacentVertices(lector1);
            if (amigosAlice == null || !amigosAlice.contains(lector2)) {
                System.out.println("‚ùå Error: Alice y Bob deber√≠an estar conectados por afinidad");
                return false;
            }

            // Prueba 8.3: Charlie no deber√≠a estar conectado con Alice/Bob (gustos diferentes)
            if (amigosAlice.contains(lector3)) {
                System.out.println("‚ùå Error: Alice y Charlie no deber√≠an estar conectados");
                return false;
            }

            // Prueba 8.4: Sugerencias de amigos para Alice
            LinkedList<Reader> sugerenciasAlice = sistemaAfinidad.getSuggestedFriends(lector1);
            // Como Alice solo est√° conectada con Bob y no hay "amigos de amigos", deber√≠a estar vac√≠a
            if (sugerenciasAlice.getSize() > 0) {
                System.out.println("‚ö†Ô∏è Advertencia: Sugerencias inesperadas para Alice (puede ser normal si el algoritmo cambi√≥)");
            }

            // Prueba 8.5: Camino m√°s corto Alice-Bob
            LinkedList<Reader> caminoAliceBob = sistemaAfinidad.getShortestPath(lector1, lector2);
            if (caminoAliceBob.getSize() != 2) { // [Alice, Bob]
                System.out.println("‚ùå Error: Camino Alice-Bob deber√≠a tener 2 nodos, tiene " + caminoAliceBob.getSize());
                return false;
            }

            // Prueba 8.6: No hay camino Alice-Charlie
            LinkedList<Reader> caminoAliceCharlie = sistemaAfinidad.getShortestPath(lector1, lector3);
            if (caminoAliceCharlie.getSize() != 0) {
                System.out.println("‚ùå Error: No deber√≠a haber camino entre Alice y Charlie");
                return false;
            }

            System.out.println("‚úÖ PRUEBA 8 EXITOSA: Sistema de afinidad integrado funciona correctamente");
            return true;

        } catch (Exception e) {
            System.out.println("‚ùå PRUEBA 8 FALLIDA: Excepci√≥n - " + e.getMessage());
            return false;
        }
    }

    /**
     * M√©todo principal para ejecutar todas las pruebas
     *
     * Ejecuta secuencialmente todas las pruebas unitarias y reporta los resultados
     */
    public static void runAllTests() {
        System.out.println("üöÄ INICIANDO SUITE DE PRUEBAS UNITARIAS");
        System.out.println("========================================");

        boolean[] resultados = new boolean[8];

        resultados[0] = testLinkedListFunctionality();
        resultados[1] = testHashMapFunctionality();
        resultados[2] = testReaderFunctionality();
        resultados[3] = testAffinityGraphAlgorithms();
        resultados[4] = testBookRecommendationSystem();
        resultados[5] = testLibraryManagement();
        resultados[6] = testPriorityQueueFunctionality();
        resultados[7] = testAffinitySystemIntegration();

        System.out.println("\nüìä RESUMEN DE RESULTADOS:");
        System.out.println("========================");

        int exitosas = 0;
        for (int i = 0; i < resultados.length; i++) {
            String status = resultados[i] ? "‚úÖ EXITOSA" : "‚ùå FALLIDA";
            System.out.println("Prueba " + (i + 1) + ": " + status);
            if (resultados[i]) exitosas++;
        }

        System.out.println("\nüéØ ESTAD√çSTICAS FINALES:");
        System.out.println("Total de pruebas: " + resultados.length);
        System.out.println("Pruebas exitosas: " + exitosas);
        System.out.println("Pruebas fallidas: " + (resultados.length - exitosas));
        System.out.println("Porcentaje de √©xito: " + (exitosas * 100 / resultados.length) + "%");

        if (exitosas == resultados.length) {
            System.out.println("\nüéâ ¬°TODAS LAS PRUEBAS PASARON EXITOSAMENTE!");
            System.out.println("El sistema est√° listo para producci√≥n.");
        } else {
            System.out.println("\n‚ö†Ô∏è Algunas pruebas fallaron. Revisar implementaci√≥n.");
        }
    }

    /**
     * M√©todo main para ejecutar las pruebas directamente
     */
    public static void main(String[] args) {
        runAllTests();
    }
}